name: AWS Packer Build and NPM Test
run-name: NPM Test and Packer Build for AWS
env:
  DB_USER: ${{secrets.DB_USER}}
  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
  NODE_PORT: ${{secrets.NODE_PORT}}
  DB_NAME: ${{secrets.DB_NAME}}
  region: ${{secrets.REGION}}
  source_ami: ${{vars.SOURCE_AMI_ID}}
  ssh_username: ${{vars.SSH_USERNAME}}
  vpc_id: ${{vars.VPC_ID}}
  subnet_id: ${{vars.SUBNET_ID}}
  ami_users: ${{vars.AMI_USERS}}


on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  npm-test:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }} 
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}                              
          MYSQL_USER: ${{ secrets.DB_USER }}                                    
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Wait for MySQL to be healthy
        run: |
          for i in `seq 1 30`; do
            if echo "SELECT 1" | mysql -h 127.0.0.1 -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} ; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 15
          done

      - name: Run Tests
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: 3306
          DB_NAME: ${{ secrets.DB_NAME }} 
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: npm test

  create_artifact:
    needs: npm-test
    name: Create Application Artifact
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "PORT=${{ vars.PORT }}" >> .env
          echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

      - name: Create artifact
        run: |
          mkdir -p artifact
          cp -R models routes app.js config.js package-lock.json package.json .env artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: webapp
          path: artifact

  packer_build:
    needs: create_artifact
    name: Build Packer Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: webapp
          path: webapp

      - name: Initialize Packer
        run: packer init packer/packer.pkr.hcl

      - name: Build Packer Image
        run: |
          packer build packer/packer.pkr.hcl

      - name: Clean up
        if: always()
        run: rm -rf webapp