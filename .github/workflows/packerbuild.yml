name: AWS Packer Build and NPM Test
run-name: NPM Test and Packer Build for AWS
env:
  DB_USER: ${{secrets.DB_USER}}
  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
  NODE_PORT: ${{secrets.NODE_PORT}}
  DB_NAME: ${{secrets.DB_NAME}}
  region: ${{secrets.REGION}}
  source_ami: ${{vars.SOURCE_AMI_ID}}
  ssh_username: ${{vars.SSH_USERNAME}}
  vpc_id: ${{vars.VPC_ID}}
  subnet_id: ${{vars.SUBNET_ID}}
  ami_users: ${{vars.AMI_USERS}}


on:
  push:
    branches:
      - A08/email
  # pull_request:
  #   types:
  #     - closed
  #   branches:
  #     - main

jobs:
  npm-test:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }} 
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}                              
          MYSQL_USER: ${{ secrets.DB_USER }}                                    
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Wait for MySQL to be healthy
        run: |
          for i in `seq 1 30`; do
            if echo "SELECT 1" | mysql -h 127.0.0.1 -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} ; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 15
          done

      - name: Run Tests
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: 3306
          DB_NAME: ${{ secrets.DB_NAME }} 
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: npm test

  create_artifact:
    needs: npm-test
    name: Create Application Artifact
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "PORT=${{ vars.PORT }}" >> .env
          echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          ls -la .env  # Verify .env was created
          cat .env 

      - name: Create artifact
        run: |
          mkdir -p artifact
          cp -R models routes middleware utils app.js config.js package-lock.json package.json .env artifact/
          ls -la artifact/  # List all files in artifact directory
          ls -la artifact/.env  # Specifically check for .env

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: webapp
          path: artifact

  packer_build:
    needs: create_artifact
    name: Build Packer Image
    runs-on: ubuntu-latest
    outputs:
      ami_id: ${{ steps.get_ami.outputs.ami_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: webapp
          path: webapp

      - name: Initialize Packer
        run: packer init packer/packer.pkr.hcl

      - name: Build Packer Image
        working-directory: ${{ github.workspace }}/packer
        run: |
          packer build .

      - name: Get AMI ID
        id: get_ami
        run: |
          sleep 10
      
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
            --output text)
          echo "AMI ID: $AMI_ID"
          echo "ami_id=${AMI_ID}" >> $GITHUB_OUTPUT

      - name: Clean up
        if: always()
        run: rm -rf webapp

  update_dev_asg:
    needs: packer_build
    name: Update Dev ASG
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Dev credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.REGION }}

      - name: Create new Launch Template version
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters Name=tag:Environment,Values=dev --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $LAUNCH_TEMPLATE_ID --query 'sort_by(LaunchTemplateVersions, &VersionNumber)[-1]')
          
          echo "Creating new launch template version with AMI: ${{ needs.packer_build.outputs.ami_id }}"


          if [ -z "$LAUNCH_TEMPLATE_ID" ]; then
            echo "No Launch Template found with Environment tag 'dev'"
            exit 0 
          fi

          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version '$Latest' \
            --launch-template-data '{"ImageId":"${{ needs.packer_build.outputs.ami_id }}"}' \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)
          
          echo "Created Launch Template version $NEW_VERSION"

      - name: Start ASG Instance Refresh
        id: refresh
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(Tags[?Key==`Environment`].Value, `dev`)].[AutoScalingGroupName]' --output text)
          
          if [ -z "$ASG_NAME" ]; then
            echo "No ASG found with Environment tag 'dev'"
            exit 0 
          fi

          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' --output text)
          
          echo "refresh_id=${REFRESH_ID}" >> $GITHUB_OUTPUT
          echo "asg_name=${ASG_NAME}" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh
        if: steps.refresh.outputs.refresh_id != ''
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ steps.refresh.outputs.asg_name }} \
              --instance-refresh-ids ${{ steps.refresh.outputs.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' --output text)
            
            echo "Instance refresh status: $STATUS"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled"
              exit 1
            fi
            
            sleep 30
          done

  update_demo_asg:
    needs: packer_build
    name: Update Demo ASG
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Demo credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ secrets.REGION }}

      - name: Create new Launch Template version
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters Name=tag:Environment,Values=demo --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $LAUNCH_TEMPLATE_ID --query 'sort_by(LaunchTemplateVersions, &VersionNumber)[-1]')
          
          if [ -z "$LAUNCH_TEMPLATE_ID" ]; then
            echo "No Launch Template found in Demo environment"
            exit 0
          fi

          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version '$Latest' \
            --launch-template-data '{"ImageId":"${{ needs.packer_build.outputs.ami_id }}"}' \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)
          
          echo "Created Launch Template version $NEW_VERSION"

      - name: Start ASG Instance Refresh
        id: refresh
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(Tags[?Key==`Environment`].Value, `demo`)].[AutoScalingGroupName]' --output text)
          
          if [ -z "$ASG_NAME" ]; then
            echo "No ASG found in Demo environment"
            exit 0
          fi

          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' --output text)
          
          echo "refresh_id=${REFRESH_ID}" >> $GITHUB_OUTPUT
          echo "asg_name=${ASG_NAME}" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh
        if: steps.refresh.outputs.refresh_id != ''
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ steps.refresh.outputs.asg_name }} \
              --instance-refresh-ids ${{ steps.refresh.outputs.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' --output text)
            
            echo "Instance refresh status: $STATUS"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled"
              exit 1
            fi
            
            sleep 30
          done
